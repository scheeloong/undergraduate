<!DOCTYPE html>
<html lang="en"> <!-- Language is English -->   
  <link rel = "stylesheet" type = "text/css" href="software.css" /> <!-- Import styles from different file --> 
   <script src="http://code.jquery.com/jquery-latest.min.js" type="text/javascript"></script>
   <script src="software.js"></script>
	<body ng-controller="ProjCtrl">
	<meta name="keywords" content="Soon Chee Loong, University of Toronto, cheeloongsoon@mail.utoronto.ca, Electrical Engineer"/>
	<meta name="description" content="Soon Chee Loong's Work"/>
				<div class="buttonWrapper">
			    <button class="btn btn-danger" type="button" ng-click="close()">Close</button>
			</div>
		<!-- Article-->
		<div id="motionTrackingDodgeBallNav">

		<h2>Motion Tracking Dodge Ball</h2>
		<h3>Purpose</h3> 
		<p> 
		The purpose of this project is to come up with a unique project that incorporates 
		the Altera DE2 FPGA board to apply our Digital Logics knowledge. <br>
		Top projects are recorded by the professor and awarded bonus marks.				
		</p> 
		<h3>Goal</h3> 
		<p>
		Our goal was to learn to work with the camera as well as aim for bonus marks in this project.
		The difficulty of implementing a real time video processing algorithms on an FPGA would guarantee us bonus marks in this project.
		We decided to code a 2D game that we call Dodge Ball, where the user has to control a character to dodge incoming balls from one side of the screen.
		However, instead of controlling the character using a mouse, we control the character using an object that is detected by the camera.
		The position of this object with respect to the camera is directly related to the position of the character on the screen.
		</p> 
		<h3>Design Challenges</h3>
		<h4>Detecting the object</h4> 
		<p>
		Detecting the object was done using threshold.
		We are allowed to set the threshold values of each RGB color component by using the switches available on the DE2 board.
		Once the right threshold with regards to be determined has been selected, <br>
		we take note of the threshold value used for that particular object as shown in <em> Figure 1 </em>.
		<figure>
		<img width="600" height="300" src="img/motionTrackingDodgeBallFigure1.jpg" alt="Recording Threshold Values"> 
		<figcaption id="profile"> <ins>Figure 1: Recording Threshold Values</ins></figcaption>
		</figure>		
		</p> 
		
		<h4>Detecting the center of the object</h4> 
		<p>
		The center of the object is determined by storing the positions of each pixel that results in a colour higher than our threshold.
		Once the algorithms loops through every possible pixel,
		the average position is calculated by dividing all the positions with the total number of positions that were stored. <br>
		This average value becomes the center of the object.		
		</p> 
		
		<h4>Random Number Generator</h4> 
		<p> 
		A pseudo random number generator using Linear Shift Feedback Register (LSFR)
		was used to generate random positions of the incoming dodge balls. <br> 
		At the start of the program, we start the timer. The time that the user hits the start button 
		for the game determines the initial state of this LSFR. <br> 
		This ensures that the initial numbers are generated differently each time as it is almost impossible 
		for a person to hit the start button at the same time interval after the program has started. 
		</p> 
		
		<h4>Game States</h4> 
		<p>
		The user first tests that the device that we built are connected and working properly 
		by entering the Actual Display State, whereby the monitor displays exactly what the camera captures.
		The user then enters the Threshold Setting state whereby the monitor only displays colours 
		that are above the set threshold value to white and the rest to black. 
		This allows the user to set the proper threshold values for the object that they will be using.
		Finally, the players enters the Game Play state whereby the user plays the game.
		The user transitions between states by pressing the Keys available on the DE2 FPGA board.		
		</p> 
		
		<h3>Result</h3> 
		<p>
		The project works as intended. 
		Although we did not have time to implement the squares as circles that would look more like balls. <br> 
		The final results are shown in <em>Video 1</em>. 	
		</p>

		<video poster="img/MotionTrackingDodgeBallCover.png" controls width="720" height="405"> <!-- Poster is the picture on screen before clicking play --> 
		<source src="video/motionTrackingDodgeBall.mp4" type="video/mp4" />
		<p>Your browser doesn't support video, please <a href="video/musicPlayer.mp4">download it</a>.</p>
		</video>		
		<p> <ins>Video 1: A Demonstration of the Gameplay.</ins> </p> 
		<p>
		Our actual demonstration video has been posted on the course website here:
		http://www-ug.eecg.toronto.edu/desl/lego.html <br> 
		Note: Our project is called Block Avoidance under the “Fall 2013 ECE241″ category.		
		</p> 
		
		<h3>Reflection</h3> 
		<h4>Divide & Conquer</h4> 
		<p>
		This project worked within 3 weeks as we broke our tasks,
		agreed on our code interfaces, and work on them separately. <br>
		This approach allowed us to complete this project on time.
		</p>
		<h4>Pair Programming</h4> 
		<p>
		Most our bugs were fixed when we executed pair programming,
		especially during the integration phase.
		</p>
		<h4>Momentum</h4> 
		<p>
		We solved most of our biggest bugs at the very last hour.
		This project would not have function perfectly if we were to take a 30 minute dinner break on the night before the deadline.
		We feel that dinner breaks stops our work momentum and decreases our effectiveness when it comes to coding.
		</p>
		
		<h3>Report</h3>
		<p>
		<a class=Report href="./pdf/motionTrackingDodgeBall.pdf"><span>Report</span></a><br><br>
		<a class=Report href="https://github.com/scheeloong/Verilog/tree/master/Motion%20Tracking%20Dodge%20Ball"><span>Code</span></a>  
		</p>
		<h3>Task Distribution</h3>
		<h4>Jerry Wang</h4> 
		<p>
		Design and implement game logic, collision detection, and outputting squares to screen. 
		</p>
		<h4>Soon Chee Loong</h4>
		<p>
		Design and implement color threshold and calculating the center location of an object by camera. 
		Also implemented multiple states of the program such as actual image recorded, 
		by playing the game, setting the threshold of the camera, and center location of object.		
		</p> 
		<h3>Acknowledgement</h3>
		<p>
		<a class=Report href="http://janders.eecg.toronto.edu/"><span>Prof. Anderson</span></a> for inspiring us in this project.<br> 
		<a class=Report href="http://people.ece.cornell.edu/land/"><span>Prof. Bruce Land</span></a> for providing free lectures about Verilog on youtube.<br>
		<a class=Report href="http://people.ece.cornell.edu/land/courses/ece5760/"><span>ECE5760</span></a> students for their open source code and project reports.<br>
		</p>
		</div> 
	</body>
</html>
